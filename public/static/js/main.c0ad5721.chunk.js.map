{"version":3,"sources":["api/CoinCap/Assets/Assets.ts","api/CoinCap/Exchanges/Exchanges.ts","Screens/HomeScreen.tsx","Components/AssetHistory.tsx","Screens/AssetsScreen.tsx","Screens/ExchangesScreen.tsx","api/CoinCap/Rates/Rates.ts","Screens/RatesScreen.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["getData","url","a","axios","get","response","status","console","log","data","parsed","JSON","parse","stringify","statusText","undefined","getHistory","id","getExchanges","HomeScreen","style","backgroundColor","minHeight","fontWeight","textShadow","color","padding","borderRadius","width","margin","textAlign","echarts","defaultProps","height","AssetHistory","propsParameters","props","Object","assign","React","useState","historyData","setHistoryData","getAndSetHistory","useCallback","asset","fetchHistory","useEffect","className","option","dataArr","forEach","val","i","date","Date","time","push","Number","priceUsd","title","text","left","toolbox","feature","saveAsImage","pixelRatio","tooltip","trigger","axisPointer","type","grid","bottom","dataZoom","xAxis","boundaryGap","yAxis","series","name","smooth","symbol","itemStyle","areaStyle","LinearGradient","offset","getOptions","theme","AssetsScreen","notCollapsedRows","setNotCollapsedRows","getDetailUI","supply","replace","maxSupply","marketCap","marketCapUsd","toFixed","volumeUsd24Hr","price","changePercent24Hr","Math","round","parseFloat","explorer","match","paddingTop","paddingBottom","rank","href","rel","target","getTdElement","str","endStr","alignItems","getTrElement","item","index","idCount","trKey","fontStyle","priceUsdVal","length","isNaN","onClick","row","rows","includes","filter","toggleRow","paddingLeft","getTrElementDetail","hidden","chartView","colSpan","Container","Row","Col","assets","timestamp","alignSelf","toLocaleString","Button","updateAssetsData","variant","getUpdatedTime","Table","striped","bordered","hover","OverlayTrigger","placement","overlay","Popover","Header","as","Body","getRows","ExchangesScreen","String","exchangeId","volumeUsd","caret","percentTotalVolume","updated","totalVolume","volume","tradingPairs","exchangeUrl","exchanges","updateExchangesData","getRates","coin","RatesScreen","rates","setRates","updateRatesData","map","toUpperCase","currencySymbol","cType","rateUsd","App","setAssets","updateAssets","newData","setExchanges","updateExchanges","styles","body","role","main","fluid","sm","minWidth","Navbar","bg","expand","header","position","Brand","textLogo","logoSymbol","logoText","Toggle","aria-controls","Collapse","Nav","headerItems","to","path","element","footer","marginLeft","marginBottom","marginTop","jumbotron","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","headerContainer","backgroundWidth","paddingRight","lineHeight","fontSize","marginRight","fontFamily","display","heaterItemLink","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0ad5721.chunk.js","sourcesContent":["// Typescript interfaces for data types\nimport { Assets as AssetsType, History, Markets } from \"./type\";\n\n// Axios library for fetching data from a server\nimport axios from \"axios\";\n\nasync function getData<Output>(url: string): Promise<Output | undefined> {\n  // Fetch data from the server\n  const response = await axios.get(url);\n  // Was the request succesfull?\n  if (response.status === 200) {\n    // Success\n    console.log(\"(200): success\");\n    // Get the data from response\n    const data = await response.data;\n\n    // Try to parse the data into Typescript interface\n    try {\n      console.log(`data: ${data}`);\n      const parsed: Output = JSON.parse(JSON.stringify(data));\n      console.log(\"parsed ok\");\n      return parsed;\n\n    } catch (e) {\n      // Error in the try block\n      console.log(`Error while parsing JSON: ${e}`);\n    }\n\n  } else {\n    // Request wasn't successfull\n    console.log(`status (${response.status}): ${response.statusText}`);\n    // Return undefined\n    return undefined;\n  }\n}\n\n// Fumction to fetch assets data\nexport const getAssets = () => getData<AssetsType.RootObject>(\"https://crypto-web-projekti.herokuapp.com/get/assets\");\n// Function to fetch history data\nexport const getHistory = (id?: string) => getData<History.RootObject>(\"https://crypto-web-projekti.herokuapp.com/get/history/\"+id);\n// Function to fetch market data\nexport const getMarkets = (id?: string) => getData<Markets.RootObject>(\"https://crypto-web-projekti.herokuapp.com/get/markets/\"+id);\n\n\n\n","// Typescript interfaces for data types\nimport { Exchanges as ExchangesType } from \"./type\";\n\n// Axios library for fetching data from a server\nimport axios from \"axios\";\n\nexport async function getExchanges() {\n  // URL\n  const url = \"https://crypto-web-projekti.herokuapp.com/get/exchanges\";\n  // Fetch data from the server\n  const response = await axios.get(url);\n  // Was the request succesfull?\n  if (response.status === 200) {\n    // Success\n    console.log(\"(200): success\");\n    // Get the data from response\n    const data = await response.data;\n    // Try to parse the data into Typescript interface\n    try {\n      console.log(`data: ${data}`);\n      const parsed: ExchangesType.RootObject = JSON.parse(JSON.stringify(data));\n      console.log(\"parsed ok\");\n      return parsed;\n    } catch (e) {\n      // Error in the try block\n      console.log(`Error while parsing JSON: ${e}`);\n    }\n  } else {\n    // Request wasn't successfull\n    console.log(`status (${response.status}): ${response.statusText}`);\n    // Return undefined\n    return undefined;\n  }\n}\n","\nexport default function HomeScreen() {\n\n    return (\n        <div style={{backgroundColor: \"#ffccffaa\", minHeight: \"320px\"}}>\n            {/* Title */}\n            <h1 style={{fontWeight: \"bolder\", textShadow: \"-2px -2px 3px #999999aa\"}}>Home</h1>\n            {/* Greeting */}\n            <h2>Welcome to my website!</h2>\n            {/* Site map */}\n            <div style={{color: \"#fafaff\", backgroundColor: \"#333333aa\", padding: \"12px\", borderRadius: \"12px\", width: \"fit-content\", margin: \"auto\"}}>\n                <h3>Site map</h3>\n                <ul style={{textAlign: \"left\"}}>\n                    <li><span style={{fontWeight: \"bolder\"}}>Assets</span>: List of cryptocurrencies and their details like value, market cap, etc.</li>\n                    <li><span style={{fontWeight: \"bolder\"}}>Exchanges</span>: List of crypto currency exchanges and some statics of them</li>\n                    <li><span style={{fontWeight: \"bolder\"}}>Rates</span>: List of crypto- and fiat currency rates against USD</li>\n                </ul>\n            </div>\n        </div>\n    );\n}\n","// React\nimport React from \"react\";\n\n// React echarts -chart library\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts';\n\n// Typescript interfaces\nimport { Assets, History } from \"../api/CoinCap/Assets/type\";\n\n// Function to fetch history data from the server\nimport { getHistory } from \"../api/CoinCap/Assets/Assets\";\n\n// Register theme object for the echarts\necharts.registerTheme('my_theme', {\n    backgroundColor: '#f4ccffee', //#f4ccff\n});\n\n// Interface for props\ninterface Props {\n    asset: Assets.Asset;\n    width?: number | string;\n    height?: number | string;\n}\n\n// Default values for props\nconst defaultProps = {\n    width: \"600px\",\n    height: \"320px\"\n}\n\nexport default function AssetHistory(propsParameters: Props) {\n    // Props from passed and default values\n    const props = Object.assign(defaultProps, propsParameters);\n\n    // State for history data\n    const [historyData, setHistoryData] = React.useState<History.RootObject>();\n\n    // Get chart options (styles and data)\n    const getOptions = (data: History.RootObject) => {\n        // Array for chart values\n        let dataArr: (number | Date)[][] = [];\n        // Loop through the data\n        data.data.forEach((val, i) => {\n            // Date from item\n            const date = new Date(val.time);\n            // Date and value into the array\n            dataArr.push([date, Number(val.priceUsd)]);\n        });\n\n        return {\n            title: {\n                text: 'History',\n                left: 10\n            },\n            toolbox: {\n                feature: {\n                    saveAsImage: { pixelRatio: 2 }\n                }\n            },\n            tooltip: {\n                trigger: 'axis',\n                axisPointer: { type: 'shadow' }\n            },\n            grid: { bottom: 90 },\n            dataZoom: [{ type: 'inside' }, { type: 'slider' }],\n            xAxis: {\n                type: 'time',\n                boundaryGap: false\n            },\n            yAxis: { type: 'value' },\n            series: [{\n                name: props.asset.name,\n                data: dataArr,\n                type: 'line',\n                smooth: false,\n                symbol: 'none',\n                itemStyle: {\n                    color: 'rgb(255, 70, 131)'\n                },\n                areaStyle: {\n                    color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                        {\n                            offset: 0,\n                            color: 'rgb(255, 158, 68)'\n                        },\n                        {\n                            offset: 1,\n                            color: 'rgb(255, 70, 131)'\n                        }\n                    ])\n                },\n            }]\n        };\n    }\n\n    // Function to fetch data from the server and because it uses props value, we use React.useCallback¨\n    // with props value in the dependencies to make sure it doesn't try to make changes into the component\n    // after its been closed\n    const getAndSetHistory = React.useCallback(() => {\n        // Fetch the history data\n        async function fetchHistory() {\n            const data = await getHistory(props.asset.id);\n            setHistoryData(data);\n        }\n\n        fetchHistory();\n    }, [props.asset.id]);\n\n    // Update the data on page load\n    // We need to include the function in the dependencies, because it uses a props value\n    React.useEffect(() => {\n        getAndSetHistory();\n    }, [getAndSetHistory]);\n\n    return (\n        <div className=\"col-sm-5\" id=\"chart\" style={{ width: props.width, height: props.height}}>\n            <ReactEcharts\n                option={(historyData) ? getOptions(historyData) : {}}\n                className='echarts-for-echarts'\n                theme='my_theme' />\n        </div>\n    );\n}\n","// React\nimport React from \"react\";\n\n// React Bootstrap elements\nimport { Table, Button, Container, Col, Row, OverlayTrigger, Popover } from \"react-bootstrap\";\n\n// Typescript interfaces for assets data (assets data in props will be in Assets.RootObject)\nimport { Assets } from \"../api/CoinCap/Assets/type\";\n\n// Charts component to show currency value history\nimport AssetHistory from '../Components/AssetHistory';\n\n// Bootstrap icons\nimport { CaretRightFill, CaretDownFill, InfoCircle } from 'react-bootstrap-icons';\n\n// Props type of parent parameters\ninterface Props {\n    assets: Assets.RootObject | undefined;\n    updateAssetsData: Function;\n}\n\nexport default function AssetsScreen(props: Props) {\n\n    // List of visible detail rows\n    const [notCollapsedRows, setNotCollapsedRows] = React.useState<Array<string>>([]);\n\n    // Cast string into number and round it into 2 decimals\n    const roundStrNumber = (str: string) => {\n        if (str?.length > 0 && str[0] === \"0\") {\n            return parseFloat(str);\n        } return Math.round(parseFloat(str) * 100) / 100;\n    }\n\n    // Toggle detail row visiblity\n    const toggleRow = (row: string) => {\n        // Get the visible rows from state\n        const rows: string[] = notCollapsedRows;\n        // Is the row visible?\n        if (rows.includes(row)) {\n            // Remove it from the state and it will be collapsed on render\n            setNotCollapsedRows(rows.filter(item => item !== row));\n        } else {\n            // Add it into the state and it will be expanded on render\n            setNotCollapsedRows([...notCollapsedRows, row]);\n        }\n    }\n\n    // Get detail row content\n    const getDetailUI = (asset: Assets.Asset) => {\n        // Supply value\n        const supply = asset.supply?.replace(/\\.0+$/,'');\n        // Max. supply value\n        const maxSupply = asset.maxSupply?.replace(/\\.0+$/,'');\n        // Market cap value\n        const marketCap = Number(asset.marketCapUsd).toFixed(2).replace(/\\.0+$/,'');\n        // Last 24h volume in USD -value\n        const volumeUsd24Hr = Number(asset.volumeUsd24Hr).toFixed(2).replace(/\\.0+$/,'');\n        // Price value\n        const price = asset.priceUsd?.replace(/\\.0+$/,'');\n        // Last 24h value change percentage value\n        const changePercent24Hr = Math.round(parseFloat((asset.changePercent24Hr !== undefined) ? asset.changePercent24Hr : \"0\") * 100) / 100;\n        // Color for \"changePercent24Hr\" text (red if negative, green if positive and not set if 0)\n        const color = (changePercent24Hr === 0) ? \"\" : ((changePercent24Hr < 0) ? \"red\" : \"green\");\n        // Blockchain explorer link text\n        const explorer = asset.explorer?.match(/^(?:https?:\\/\\/)?(?:[^@\\n]+@)?(?:www\\.)?([^:/\\n?=]+)/im);\n\n        return (\n            <div >\n                <h3 style={{textShadow: \"-1px -1px 2px #BCDBFC99\"}}>{asset.name} ({asset.symbol})</h3>\n                <ul style={{textAlign: \"left\", backgroundColor: \"#212529\", borderRadius: \"12px\", paddingTop: \"8px\", paddingBottom: \"8px\"}}>\n                    <li>Rank: {asset.rank}</li>\n                    <li>Supply: {supply}</li>\n                    <li>Max. Supply: {maxSupply}</li>\n                    <li>Market cap: {marketCap} $</li>\n                    <li>Last 24H Volume: {volumeUsd24Hr} $</li>\n                    <li>Price: {price} $</li>\n                    <li>Last 24H Change: <span style={{ color: color }}>{changePercent24Hr}</span> %</li>\n                    <li>Explorer: <a href={asset.explorer} rel=\"noreferrer\" target=\"_blank\">{explorer}</a></li>\n                </ul>\n            </div>\n        );\n    }\n\n    // Get collapse class to hide the row if not in the expanded list\n    const getCollapse = (id: string) => (notCollapsedRows.includes(id)) ? \"\" : \"collapse\";\n\n    // Get column element with colored percentage value\n    const getTdElement = (str: string, endStr?: string) => {\n        // Percentage value from string into number\n        const val = Math.round(parseFloat(str) * 100) / 100;\n        // Color for the value\n        const color = (val === 0) ? \"\" : ((val < 0) ? \"red\" : \"green\");\n\n        return (\n            <td style={{margin: 0, padding: 0}}>\n                <div style={{backgroundColor: \"#212529\", margin: 0, padding: 0, textAlign: \"center\", alignItems: \"center\"}}>\n                    <span style={{color: color}}>{val}</span>{(endStr) ? \" \" + endStr : \"\"}\n                </div>\n            </td>\n        );\n    }\n\n    // Get main row element\n    const getTrElement = (item: Assets.Asset, index: number, idCount: number) => {\n        // Key for tr element\n        const trKey = (item.id === null) ? `${index}_null` : `${index}_${item.id}`;\n        // Coin symbol\n        const symbol = <span style={{color: \"#BCDBFC\", fontStyle: \"italic\"}}>{item.symbol}</span>;\n        // USD price value in number\n        const priceUsdVal = roundStrNumber(item.priceUsd ? item.priceUsd : \"\");\n        // USD price string with color\n        const priceUsd = <span style={{color: (!isNaN(priceUsdVal)) ? \"#4C7\" : \"#F22\"}}>{priceUsdVal}</span>\n\n        return (\n            <tr key={trKey} className=\"clickable\" onClick={() => toggleRow(item.id ? item.id : \"\")} >\n                <td>{idCount}</td>\n                <td style={{textShadow: \"-1px -1px 1px #BCDBFC33\"}}>{item.name} ({symbol})</td>\n                <td style={{textAlign: \"left\", paddingLeft: \"20px\"}}>{priceUsd} $</td>\n                {getTdElement(item.changePercent24Hr ? item.changePercent24Hr : \"\", \"%\")}\n                <td>{(notCollapsedRows.includes(item.id)) ? <CaretDownFill /> : <CaretRightFill />}</td>\n            </tr>\n        );\n    }\n\n    // Get detail row element\n    const getTrElementDetail = (item: Assets.Asset, index: number) => {\n        // Key for tr element\n        const trKey = (item.id === null) ? `${index}_null_collapse` : `${index}_${item.id}_collapse`;\n        // Will the row be visible\n        const hidden = getCollapse(item.id);\n        // Get chart view with history data, if the row is visible\n        const chartView = (hidden !== \"collapse\") ? <AssetHistory asset={item} /> : <></>;\n\n        return (\n            <tr key={trKey} className={hidden}>\n                <td colSpan={5}>\n                    <Container>\n                        <Row>\n                            <Col>{chartView}</Col>\n                            <Col>{getDetailUI(item)}</Col>\n                        </Row>\n\n                        Click the row again to hide me\n                    </Container>\n                </td>\n            </tr>\n        );\n    }\n\n    // Get main and detail rows\n    const getRows = () => {\n        // Rows array\n        let rows: JSX.Element[] = [];\n        // Value for # column in the table\n        let idCount = 0;\n        // Map through assets\n        props.assets?.data.forEach((item: Assets.Asset, index: number) => {\n            // If asset id is not null, add into rows array\n            if (item.id !== null) {\n                // New main row\n                rows.push(getTrElement(item, index, idCount));\n                // New detail row (hidden until main row clicked)\n                rows.push(getTrElementDetail(item, index));\n                // Value for the next row\n                idCount++;\n            }\n        });\n        // Return rows\n        return rows;\n    }\n\n    // Get update button and last updated date and time string\n    const getUpdatedTime = () => {\n        // Is the timestamp defined?\n        if (props.assets?.timestamp !== undefined) {\n            // Get Date from the timestamp\n            const date = new Date(props.assets.timestamp)\n\n            return (\n                <div style={{backgroundColor: \"#ffffff99\", textAlign: \"left\", paddingLeft: \"12px\"}}>\n                    <span style={{alignSelf: \"left\"}}>Last updated: {date.toLocaleString()}</span>\n                    <Button style={{margin: \"4px\"}} onClick={() => props.updateAssetsData()} variant=\"primary\">Update</Button>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <div style={{backgroundColor: \"#ffccffaa\"}}>\n            {/* Title */}\n            <h1 style={{fontWeight: \"bolder\", textShadow: \"-2px -2px 3px #999999aa\"}}>Assets</h1>\n            <br/><br/>\n            {/* Update button and the last updated -info */}\n            {getUpdatedTime()}\n            {/* Table for assets */}\n            <Table striped bordered hover variant=\"dark\">\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Coin</th>\n                        <th>Value</th>\n                        <th colSpan={1}>24h</th>\n                        <th>\n                            <OverlayTrigger\n                                trigger=\"click\"\n                                placement=\"top\"\n                                overlay={\n                                    <Popover id={`popover-positioned-right`}>\n                                        <Popover.Header as=\"h3\">Table</Popover.Header>\n                                        <Popover.Body>Click table row for details</Popover.Body>\n                                    </Popover>\n                                }\n                            >\n                                <InfoCircle/>\n                            </OverlayTrigger>{' '}\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { getRows() }\n                    {/*<tr id=\"example_row\">\n                        <td>1</td>\n                        <td>Bitcoin</td>\n                        <td>60000 $</td>\n                        <td>+1.4 %</td>\n                        <td></td>\n                    </tr>*/}\n                </tbody>\n            </Table>\n        </div>\n    );\n}\n","// React\nimport React from \"react\";\n\n// React Bootstrap elements\nimport { Table, Button, Container, OverlayTrigger, Popover } from \"react-bootstrap\";\n\n// Typescript interfaces for exchanges data (exchanges data in props will be in ExchangesType.RootObject)\nimport { Exchanges as ExchangesType } from \"../api/CoinCap/Exchanges/type\";\n\n// Bootstrap icons\nimport { CaretRightFill, CaretDownFill, InfoCircle } from 'react-bootstrap-icons';\n\n// Props type of parent parameters\ninterface Props {\n    exchanges: ExchangesType.RootObject | undefined;\n    updateExchangesData: Function;\n}\n\nexport default function ExchangesScreen(props: Props) {\n\n    // List of visible detail rows\n    const [notCollapsedRows, setNotCollapsedRows] = React.useState<Array<string>>([]);\n\n    // Cast string into number and round it into 2 decimals\n    const roundStrNumber = (str: string) => {\n        if (str?.length > 0 && str[0] === \"0\") {\n            return String(parseFloat(str));\n        } return String(Math.round(parseFloat(str) * 100) / 100);\n    }\n\n    // Toggle detail row visiblity\n    const toggleRow = (row: string) => {\n        // Get the visible rows from state\n        const rows: string[] = notCollapsedRows;\n        // Is the row visible?\n        if (rows.includes(row)) {\n            // Remove it from the state and it will be collapsed on render\n            setNotCollapsedRows(rows.filter(item => item !== row));\n        } else {\n            // Add it into the state and it will be expanded on render\n            setNotCollapsedRows([...notCollapsedRows, row]);\n        }\n    }\n\n    // Get collapse class to hide the row if not in the expanded list\n    const getCollapse = (id: string) => (notCollapsedRows.includes(id)) ? \"\" : \"collapse\";\n\n    // Get column element with colored percentage value\n    const getTdElement = (str: string, endStr?: string) => {\n        // Percentage value from string into number\n        const val = Math.round(parseFloat(str) * 100) / 100;\n        // Color for the value\n        const color = (val === 0) ? \"\" : ((val < 0 || Number.isNaN(val)) ? \"red\" : \"green\");\n\n        return (\n            <td style={{margin: 0, padding: 0}}>\n                <div style={{backgroundColor: \"#212529\", margin: 0, padding: 0, textAlign: \"center\", alignItems: \"center\"}}>\n                    <span style={{color: color}}>{String(val)}</span>{(endStr) ? \" \" + endStr : \"\"}\n                </div>\n            </td>\n        );\n    }\n\n    // Get main row element\n    const getTrElement = (item: ExchangesType.Datum, index: number, idCount: number) => {\n        // Key for tr element\n        const trKey = (item.exchangeId === null) ? `${index}_null` : `${index}_${item.exchangeId}`;\n        // Volume in USD value\n        const volumeUsd = roundStrNumber(item.volumeUsd);\n        // Color for \"volumeUsd\" (red if NaN, else green)\n        const color = (!isNaN(Number(volumeUsd))) ? \"#4C7\" : \"#F22\";\n        // Arrow icon (arrow right when detail row hidden and arrow down when expanded)\n        const caret = (notCollapsedRows.includes(item.exchangeId)) ? <CaretDownFill /> : <CaretRightFill />;\n\n        return (\n            <tr key={trKey} className=\"clickable\" onClick={() => toggleRow(item.exchangeId)} >\n                <td>{idCount}</td>\n                <td>{item.name}</td>\n                <td><span style={{color: color}}>{volumeUsd}</span> $</td>\n                {getTdElement(item.percentTotalVolume, \"%\")}\n                <td>{caret}</td>\n            </tr>\n        );\n    }\n\n    // Get detail row element\n    const getTrElementDetail = (item: ExchangesType.Datum, index: number) => {\n        // Key for tr element\n        const trKey = (item.exchangeId === null) ? `${index}_null_collapse` : `${index}_${item.exchangeId}_collapse`;\n        // Will the row be visible\n        const hidden = getCollapse(item.exchangeId);\n        // Data updated value\n        const updated = new Date(item.updated);\n        // Total volume percentage\n        const totalVolume = Number(item.percentTotalVolume).toFixed(3).replace(/\\.0+$/,'');\n        // Volume in USD value\n        const volume = Number(item.volumeUsd).toFixed(2).replace(/\\.0+$/,'');\n\n        return (\n            <tr key={trKey} className={hidden}>\n                <td colSpan={5}>\n                    <Container>\n                        <h3>{item.name}</h3>\n                        <ul style={{textAlign: \"left\"}}>\n                            <li>Rank: {item.rank}</li>\n                            <li>Total Volume: {totalVolume} %</li>\n                            <li>Volume: {volume} $</li>\n                            <li>Trading Pairs: {item.tradingPairs} pcs</li>\n                            <li>Website: <a href={item.exchangeUrl} rel=\"noreferrer\" target=\"_blank\">{item.exchangeUrl}</a></li>\n                            <li>Updated: {updated.toLocaleString()}</li>\n                        </ul>\n                        Click the row again to hide me\n                    </Container>\n                </td>\n            </tr>\n        );\n    }\n\n    // Returns table rows made from Exchanges data\n    const getRows = () => {\n        // Rows array\n        let rows: JSX.Element[] = [];\n        // Value for # column in the table\n        let idCount = 0;\n        // Map through exchanges\n        props.exchanges?.data.forEach((item: ExchangesType.Datum, index: number) => {\n            // If exchange id is not null, add into rows array\n            if (item.exchangeId !== null) {\n                // New main row\n                rows.push(getTrElement(item, index, idCount));\n                // New detail row (hidden until main row clicked)\n                rows.push(getTrElementDetail(item, index));\n                // Value for the next row\n                idCount++;\n            }\n        });\n        // Return rows\n        return rows;\n    }\n\n    // Get update button and last updated date and time string\n    const getUpdatedTime = () => {\n        // Is the timestamp defined?\n        if (props.exchanges?.timestamp !== undefined) {\n            // Get Date from the timestamp\n            const date = new Date(props.exchanges.timestamp)\n\n            return (\n                <div style={{backgroundColor: \"#ffffff99\", textAlign: \"left\", paddingLeft: \"12px\"}}>\n                    <span style={{alignSelf: \"left\"}}>Last updated: {date.toLocaleString()}</span>\n                    <Button style={{margin: \"4px\"}} onClick={() => props.updateExchangesData()} variant=\"primary\">Update</Button>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <div style={{backgroundColor: \"#ffccffaa\"}}>\n            {/* Title */}\n            <h1 style={{fontWeight: \"bolder\", textShadow: \"-2px -2px 3px #999999aa\"}}>Exchanges</h1>\n            <br/><br/>\n            {/* Update button and the last updated -info */}\n            {getUpdatedTime()}\n            {/* Table for exchanges */}\n            <Table striped bordered hover variant=\"dark\">\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Name</th>\n                        <th>Volume</th>\n                        <th colSpan={1}>Total Volume</th>\n                        <th>\n                            <OverlayTrigger\n                                trigger=\"click\"\n                                placement=\"top\"\n                                overlay={\n                                    <Popover id={`popover-positioned-right`}>\n                                        <Popover.Header as=\"h3\">Table</Popover.Header>\n                                        <Popover.Body>Click table row for details</Popover.Body>\n                                    </Popover>\n                                }\n                            >\n                                <InfoCircle/>\n                            </OverlayTrigger>{' '}\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { getRows() }\n                    {/*<tr id=\"example_row\">\n                        <td>1</td>\n                        <td>Binance</td>\n                        <td>27770603778.97 $</td>\n                        <td>39.9 %</td>\n                        <td><CaretRightFill /></td>\n                    </tr>*/}\n                </tbody>\n            </Table>\n        </div>\n    );\n}\n","// Typescript interfaces for data types\nimport { Rates } from \"./type\";\n\n// Axios library for fetching data from a server\nimport axios from \"axios\";\n\nexport async function getRates(coin?: string) {\n  // URL\n  const url = `https://crypto-web-projekti.herokuapp.com/get/rates/${\n    coin !== undefined ? coin : \"\"\n  }`;\n  // Fetch data from the server\n  const response = await axios.get(url);\n  // Was the request succesfull?\n  if (response.status === 200) {\n    // Success\n    console.log(\"(200): success\");\n    // Get the data from response\n    const data = await response.data;\n    // Try to parse the data into Typescript interface\n    try {\n      console.log(`data: ${data}`);\n      const parsed: Rates.RootObject = JSON.parse(JSON.stringify(data));\n      console.log(\"parsed ok\");\n      return parsed;\n    } catch (e) {\n      // Error in the try block\n      console.log(`Error while parsing JSON: ${e}`);\n    }\n  } else {\n    // Request wasn't successfull\n    console.log(`status (${response.status}): ${response.statusText}`);\n    // Return undefined\n    return undefined;\n  }\n}\n","// React\nimport React from \"react\";\n\n// React Bootstrap elements\nimport { Table, Button } from \"react-bootstrap\";\n\n// Typescript interfaces for rates data\nimport { Rates as RatesType } from \"../api/CoinCap/Rates/type\";\n\n// Function to fetch rates data\nimport { getRates } from \"../api/CoinCap/Rates/Rates\";\n\nexport default function RatesScreen() {\n\n    // Rates data\n    const [rates, setRates] = React.useState<RatesType.RootObject>();\n\n    // Fetch rates data from the server and save it into state\n    const updateRatesData = async () => {\n        const data = await getRates();\n        setRates(data);\n    }\n\n    // Fetch rates data from the server on page load\n    React.useEffect(() => {\n        updateRatesData();\n    }, []);\n\n    const getTrElement = (item: RatesType.Rate, index: number) => {\n        // Key for tr element\n        const trKey = (item.id === null) ? `${index}_null` : `${index}_${item.id}`;\n        // Currency name\n        const name = item.id.replace(/-/g, ' ').toUpperCase();\n        // Currency symbol character (example: € for Euro)\n        const symbol = (item.currencySymbol) ? item.currencySymbol : \"-\";\n        // Currency type (Crypto or Fiat)\n        const cType = (item.type === \"crypto\") ? \"Crypto\" : \"Fiat\";\n        // Color for currency type\n        const color = (cType === \"Crypto\") ? \"orange\" : \"cyan\";\n\n        return (\n            <tr key={trKey} style={{textShadow: \"-1px -1px 1px #BCDBFC33\"}} >\n                <td>{index}</td>\n                <td>{name}</td>\n                <td><span style={{color: \"#BCDBFC\", fontStyle: \"italic\"}}>{item.symbol}</span></td>\n                <td>{symbol}</td>\n                <td><span style={{color: color}}>{cType}</span></td>\n                <td><span style={{color: (!isNaN(Number(item.rateUsd))) ? \"#4C7\" : \"#F22\"}}>{item.rateUsd}</span> $</td>\n            </tr>\n        );\n    }\n\n    // Get update button and last updated date and time string\n    const getUpdatedTime = () => {\n        // Is the timestamp defined?\n        if (rates?.timestamp !== undefined) {\n            // Get Date from the timestamp\n            const date = new Date(rates.timestamp);\n\n            return (\n                <div style={{backgroundColor: \"#ffffff99\", textAlign: \"left\", paddingLeft: \"12px\"}}>\n                    <span style={{alignSelf: \"left\"}}>Last updated: {date.toLocaleString()}</span>\n                    <Button style={{margin: \"4px\"}} onClick={() => updateRatesData()} variant=\"primary\">Update</Button>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <div style={{backgroundColor: \"#ffccffaa\"}}>\n            {/* Title */}\n            <h1 style={{fontWeight: \"bolder\", textShadow: \"-2px -2px 3px #999999aa\"}}>Rates</h1>\n            <br/><br/>\n            {/* Update button and the last updated -info */}\n            {getUpdatedTime()}\n            {/* Table for rates */}\n            <Table striped bordered hover variant=\"dark\">\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Name</th>\n                        <th>Symbol</th>\n                        <th>Currency Symbol</th>\n                        <th>Type</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { rates?.data?.map((item: RatesType.Rate, index: number) => getTrElement(item, index)) }\n                    <tr key=\"bitcoin_placeholder\">\n                        <td>1</td>\n                        <td>BITCOIN</td>\n                        <td>BTC</td>\n                        <td>₿</td>\n                        <td>Crypto</td>\n                        <td>61491.8340078056006810 $</td>\n                    </tr>\n                </tbody>\n            </Table>\n        </div>\n    );\n}\n","// Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// Bootstrap JS\nimport \"bootstrap/js/src/collapse.js\";\n\n// React\nimport React from \"react\";\n\n// React Router elements\nimport { BrowserRouter as Router, Routes, Route, NavLink } from \"react-router-dom\";\n\n// React Bootstrap elements\nimport { Navbar, Container, Row, Col, Nav } from \"react-bootstrap\";\n\n// Function to fetch assets data\nimport { getAssets } from './api/CoinCap/Assets/Assets';\n// Typescript interface for assets data (getAssets() returns this)\nimport { Assets } from \"./api/CoinCap/Assets/type\";\n\n// Function to fetch exchanges data\nimport { getExchanges } from \"./api/CoinCap/Exchanges/Exchanges\";\n// Typescript interface for exchanges data (getExchanges() returns this)\nimport { Exchanges as ExchangesType } from \"./api/CoinCap/Exchanges/type\";\n\n// Screens:\nimport HomeScreen from \"./Screens/HomeScreen\";\nimport AssetsScreen from './Screens/AssetsScreen';\nimport ExchangesScreen from \"./Screens/ExchangesScreen\";\nimport RatesScreen from \"./Screens/RatesScreen\";\n\nfunction App() {\n\n  // Assets data\n  const [assets, setAssets] = React.useState<Assets.RootObject>();\n\n  // Fetch and save the assets data from the server into state\n  const updateAssets = async () => {\n    // Await the data\n    const newData = await getAssets();\n    // If data is not undefined, save it into state\n    if (newData !== undefined) {\n      setAssets(newData);\n    }\n  };\n\n  // Exchanges data\n  const [exchanges, setExchanges] = React.useState<ExchangesType.RootObject>();\n\n  // Fetch and save the exchanges data from the server into state\n  const updateExchanges = async () => {\n    // Await the data\n    const newData = await getExchanges();\n    // If data is not undefined, save it into state\n    if (newData !== undefined) {\n      setExchanges(newData);\n    }\n  };\n\n  // Update assets and exchanges data on page load\n  React.useEffect(() => {\n    updateAssets();\n    updateExchanges();\n  }, []);\n\n  return (\n    <div style={styles.body}>\n      <main role=\"main\" className=\"container-fluid\" style={styles.main}>\n        <Container fluid className=\"text-center\">\n          <Row>\n            <Col sm={1} />\n            {/* Content */}\n            <Col sm={10} style={{minWidth: \"fit-content\"}} >\n              {/* Router */}\n              <Router>\n                {/* Navigation bar */}\n                <Navbar className=\"navbar-inverse\" bg=\"dark\" variant=\"dark\" expand=\"lg\" style={styles.header}>\n                  <Container style={{position: \"relative\"}}>\n                    {/* Crypto -symbol in navigation bar */}\n                    <Navbar.Brand>\n                      <Container style={styles.textLogo} id=\"text-logo\">\n                        <Row>\n                          <Col style={styles.logoSymbol} id=\"logo-symbol\">C</Col>\n                          <Col style={styles.logoText} id=\"logo-text\">rypto</Col>\n                        </Row>\n                      </Container>\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    {/* Navigation links (collapsing into list on small screens) */}\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                      <Nav className=\"mr-auto\" style={styles.headerItems}>\n                        <NavLink to={\"/\"} className=\"nav-link\">Home</NavLink>\n                        <NavLink to={\"/Assets\"} className=\"nav-link\">Assets</NavLink>\n                        <NavLink to={\"/Exchanges\"} className=\"nav-link\">Exchanges</NavLink>\n                        <NavLink to={\"/Rates\"} className=\"nav-link\">Rates</NavLink>\n                      </Nav>\n                    </Navbar.Collapse>\n                  </Container>\n                </Navbar>\n                {/* Routes to pages */}\n                <Routes>\n                  <Route path=\"/\" element={<HomeScreen />} />\n                  <Route path=\"/Assets\" element={<AssetsScreen assets={assets} updateAssetsData={updateAssets} />} />\n                  <Route path=\"/Exchanges\" element={<ExchangesScreen exchanges={exchanges} updateExchangesData={updateExchanges} />} />\n                  <Route path=\"/Rates\" element={<RatesScreen />} />\n                </Routes>\n              </Router>\n                {/* Page footer */}\n                <footer id=\"sticky-footer\" className=\"site-footer clearfix py-2 bg-dark text-white-50 mr-auto\" style={styles.footer} >\n                  <Container className=\"text-center\">\n                    <small>Oskari Saarinen &copy; 2021</small>\n                  </Container>\n                </footer>\n            </Col>\n            <Col sm={1} />\n          </Row>\n        </Container>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\n// CSS styles\nconst styles = {\n  body: {\n    //backgroundColor: \"rgba(120, 40, 255, 0.1)\",\n    height: \"100%\",\n    paddingTop: 20\n  },\n  main: {\n    marginLeft: \"0px\",\n    marginBottom: \"40px\",\n    marginTop: \"0px\"\n  },\n  jumbotron: {\n    borderTopLeftRadius: \"0px\", //40px\n    borderTopRightRadius: \"0px\", //40px\n    borderBottomRightRadius: \"0px\",\n    borderBottomLeftRadius: \"0px\",\n    backgroundColor: \"rgba(255, 255, 255, 0.7)\",\n    marginBottom: \"0px\"\n  },\n  footer: {\n    //display: \"flex\",//\"block\",\n    //position: \"relative\",\n    borderTopLeftRadius: \"0px\",\n    borderTopRightRadius: \"0px\",\n    borderBottomLeftRadius: \"30px\",\n    borderBottomRightRadius: \"30px\",\n    marginTop: \"-16px\",\n    backgroundColor: \"rgba(200,200,200,0.2)\"\n  },\n  header: {\n    //display: \"flex\", //\"block\"\n    //position: \"relative\",\n    borderTopLeftRadius: \"40px\",\n    borderTopRightRadius: \"40px\",\n    borderBottomLeftRadius: \"0px\",\n    borderBottomRightRadius: \"0px\"\n  },\n  headerContainer: {\n    backgroundColor: \"rgba(128, 72, 255, 0.7)\",\n    marginLeft: \"8px\"\n\n  },\n  textLogo: {\n    //float: \"left\",\n    backgroundColor: \"rgba(128, 72, 255, 0.9)\",\n    height: \"44px\",//\"50px\", //\"66px\"\n    backgroundWidth: \"100%\",\n    borderTopLeftRadius: \"25px\",\n    borderTopRightRadius: \"0px\",\n    borderBottomLeftRadius: \"25px\",\n    borderBottomRightRadius: \"0px\",\n    paddingLeft: 0,\n    paddingRight: \"8px\"\n  },\n  logoSymbol: {\n    //float: \"left\",\n    width: \"44px\", /*OS: 56px*/\n    height: \"44px\", /*OS: 56px*/\n    lineHeight: \"44px\", /*OS: 56px*/\n    backgroundColor: \"#7066ff\",\n    borderRadius: \"100px\",\n    //textAlign: \"center\",\n    color: \"#fff\",\n    fontSize: \"28px\",\n    fontWeight: 800,\n    marginRight: \"-12px\",//\"8px\",\n    marginTop: 0,//\"3px\",\n    marginBottom: 0,//\"3px\",\n    marginLeft: \"8px\",\n    paddingTop: 0,\n    paddingBottom: 0,\n\n    fontFamily: \"Poppins, Helvetica, sans-serif\"\n  },\n  logoText: {\n    //float: \"left\",\n    lineHeight: \"50px\",//\"50px\", /*OS: 56px*/\n    fontSize: \"20px\",\n    color: \"#fff\",\n    fontWeight: 600,\n    display: \"block\",\n    marginLeft: \"-12px\",\n    marginBottom: \"-6px\",\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  headerItems: {\n    lineHeight: \"50px\",\n    fontSize: \"18px\",\n    display: \"flex\",\n    //textAlign: \"center\",\n    paddingTop: 0, //\"3px\",\n    paddingBottom: 0, //\"3px\",\n    marginTop: 0,//\"3px\",\n    marginBottom: 0,//\"3px\",\n  },\n  heaterItemLink: {\n    backgroundColor: \"rgba(0, 0, 255, 0.5)\",\n    height: \"50px\",\n    lineHeight: \"50px\",\n    paddingTop: 0,\n    paddingBottom: 0,\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}